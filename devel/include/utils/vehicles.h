// Generated by gencpp from file utils/vehicles.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_VEHICLES_H
#define UTILS_MESSAGE_VEHICLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct vehicles_
{
  typedef vehicles_<ContainerAllocator> Type;

  vehicles_()
    : ID(0)
    , timestamp(0.0)
    , posA(0.0)
    , posB(0.0)
    , rotA(0.0)
    , rotB(0.0)  {
    }
  vehicles_(const ContainerAllocator& _alloc)
    : ID(0)
    , timestamp(0.0)
    , posA(0.0)
    , posB(0.0)
    , rotA(0.0)
    , rotB(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef float _timestamp_type;
  _timestamp_type timestamp;

   typedef float _posA_type;
  _posA_type posA;

   typedef float _posB_type;
  _posB_type posB;

   typedef float _rotA_type;
  _rotA_type rotA;

   typedef float _rotB_type;
  _rotB_type rotB;





  typedef boost::shared_ptr< ::utils::vehicles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::vehicles_<ContainerAllocator> const> ConstPtr;

}; // struct vehicles_

typedef ::utils::vehicles_<std::allocator<void> > vehicles;

typedef boost::shared_ptr< ::utils::vehicles > vehiclesPtr;
typedef boost::shared_ptr< ::utils::vehicles const> vehiclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::vehicles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::vehicles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::vehicles_<ContainerAllocator1> & lhs, const ::utils::vehicles_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.timestamp == rhs.timestamp &&
    lhs.posA == rhs.posA &&
    lhs.posB == rhs.posB &&
    lhs.rotA == rhs.rotA &&
    lhs.rotB == rhs.rotB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::vehicles_<ContainerAllocator1> & lhs, const ::utils::vehicles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::vehicles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::vehicles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::vehicles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::vehicles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::vehicles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::vehicles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::vehicles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de73bb5b781774cb3107d20c52b302aa";
  }

  static const char* value(const ::utils::vehicles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde73bb5b781774cbULL;
  static const uint64_t static_value2 = 0x3107d20c52b302aaULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::vehicles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/vehicles";
  }

  static const char* value(const ::utils::vehicles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::vehicles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n"
"float32 timestamp\n"
"float32 posA\n"
"float32 posB\n"
"float32 rotA\n"
"float32 rotB\n"
;
  }

  static const char* value(const ::utils::vehicles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::vehicles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.timestamp);
      stream.next(m.posA);
      stream.next(m.posB);
      stream.next(m.rotA);
      stream.next(m.rotB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::vehicles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::vehicles_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "timestamp: ";
    Printer<float>::stream(s, indent + "  ", v.timestamp);
    s << indent << "posA: ";
    Printer<float>::stream(s, indent + "  ", v.posA);
    s << indent << "posB: ";
    Printer<float>::stream(s, indent + "  ", v.posB);
    s << indent << "rotA: ";
    Printer<float>::stream(s, indent + "  ", v.rotA);
    s << indent << "rotB: ";
    Printer<float>::stream(s, indent + "  ", v.rotB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_VEHICLES_H
